pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
--[[ core functions
Sprite flags
0 - solid
1 - grabbable
2 - unbreakable
Game States
0 - main menu
1 - game
]]
function _init()
	U=2
    D=3
    L=0
    R=1
    O=4
    X=5
	init_menu()
end

function _update60()
	cls()
	if game_state == 0 then
		update_menu()
	elseif game_state == 1 then
		move_player()
		move_tiles()
		move_enemies()
	end
end

function _draw()
	if game_state == 0 then
		draw_menu()
	elseif game_state == 1 then
		draw_environment()
		draw_thrown_tiles()
		draw_player()
		draw_enemies()
	end
	draw_debug()
end
-->8
-- game logic
function init_game(environment)
	gravity = 0.3
	player = {
		x=64,
		y=64,
		x_velocity=0,
		y_velocity=0,
		cayote_time=0,
		grabbing=-1,
		facing=L,
		grappling = false,
		hook = nil,
		hitstun = 0,
	}
	game_state = 1
	thrown_tiles = {}
	enemies = {}
	load_environment(environment)
	spawn_enemies()
end

function draw_debug()
	print(flr(stat(1)*100).."% ram", 0, 0, 2)
	if game_state == 1 then
		print(player.x_velocity)
	end
end

-->8
-- player logic 
function move_player()
	local frict = 1.5
	local max_cayote_time = 5
	local grounded = false
	
	apply_inputs()
	
	if player.grappling and player.hook and not player.hook.attached then
		local h = player.hook
		h.x += h.dx
		h.y += h.dy

		if check_tile_stat(h.x, h.y, 0) then
			h.attached = true
		end
	end

	apply_grapple_force()

	player.y_velocity += gravity

	local new_y = player.y + player.y_velocity
	if player.y_velocity > 0 and (
		check_tile_stat(player.x - 3, new_y + 4, 0) or
		check_tile_stat(player.x, new_y + 4, 0) or
		check_tile_stat(player.x + 3, new_y + 4, 0)
	) then
		player.y = flr((new_y + 4) / 8) * 8 - 4
		player.y_velocity = 0
		player.cayote_time = max_cayote_time
		grounded = true
	elseif player.y_velocity < 0 and (
		check_tile_stat(player.x - 3, new_y - 4, 0) or
		check_tile_stat(player.x, new_y - 4, 0) or
		check_tile_stat(player.x + 3, new_y - 4, 0) 
	) then
		player.y = flr((new_y - 4) / 8 + 1) * 8 + 4
		player.y_velocity = 0
	else
		player.y = new_y
	end

	local new_x = player.x + player.x_velocity
	if player.x_velocity != 0 then
		local offset = player.x_velocity > 0 and 4 or -4
		if check_tile_stat(new_x + offset, player.y, 0) then
			if player.x_velocity > 0 then
				player.x = flr((new_x + 4) / 8) * 8 - 4
			else
				player.x = flr((new_x - 4) / 8 + 1) * 8 + 4
			end
			player.x_velocity = 0
		else
			player.x = new_x
		end
	end
	
	if player.hitstun <= 0 then
		player.x_velocity = abs(player.x_velocity) < frict and 0 or player.x_velocity - sgn(player.x_velocity)*frict
	end
	if not grounded and player.cayote_time > 0 then player.cayote_time -= 1 end
	if player.hitstun > 0 then player.hitstun -= 1 end
end

function apply_grapple_force()
	if not player.grappling or not player.hook or not player.hook.attached then return end

	local dx = player.x - player.hook.x
	local dy = player.y - player.hook.y
	local dist = sqrt(dx*dx + dy*dy)
	local rest_len = 40

	if dist > rest_len then
		local stretch = dist - rest_len
		local nx = dx / dist
		local ny = dy / dist

		local tension = 0.05 

		local angle = atan2(dy, dx)
		local swing_force = gravity * sin(angle) 
		--print(swing_force, 64, 64, 7)
		--line(64, 64, 64 + swing_force * 30, 64, 2)
		
		local fx = -tension * stretch * nx - swing_force
		local fy = -tension * stretch * ny
		local max_velocity = 5
		fx = min(fx, max_velocity)
		fy = min(fy, max_velocity)

		player.x_velocity += fx
		player.y_velocity += fy
	end
end

function draw_player()
	local x = player.x
	local y = player.y
	if flr(player.hitstun / 3) % 2 == 0 then
		spr(1, x - 4, y - 4)
	end

	if player.grabbing != -1 then
		spr(player.grabbing, x - 4, y - 12)
	end

	if player.grappling and player.hook then
		line(player.x, player.y - 8, player.hook.x, player.hook.y, 7)
	end
end

function fire_grapple()
	-- for now, just shoot hook straight up
	local hook_x = player.x
	local hook_y = player.y - 8
	local angle = 0.25 - (1/10)
	local speed = 5
	local hook_dx = cos(angle) * speed
	local hook_dy = sin(angle) * speed

	player.grappling = true
	player.hook = {
		x = hook_x,
		y = hook_y,
		dx = hook_dx,
		dy = hook_dy,
		attached = false
	}
end

function damage_player()
	local direction = 0.375
	local magnitude = 5
	player.x_velocity += cos(direction) * magnitude
	player.y_velocity += sin(direction) * magnitude
	player.hitstun = 10
end

function apply_inputs()
	local speed = 1.5
	local jump_strength = 4

	if player.hitstun > 0 then return end

	if btn(L) then
		player.x_velocity -= speed
		player.facing = L
	elseif btn(R) then
		player.x_velocity += speed
		player.facing = R
	end

	if btnp(O) and (
		check_tile_stat(player.x - 3, player.y+5, 0) or
		check_tile_stat(player.x, player.y+5, 0) or
		check_tile_stat(player.x + 3, player.y+5, 0) or
		player.cayote_time > 0 or
		player.grappling
	) then 
		player.y_velocity = - jump_strength
		if player.grappling then
			player.grappling = false
			player.hook = nil
		end
	end

	if btnp(X) then
		if btn(D) and player.grabbing == -1 then
			grabbable_tiles = {
				{state=check_tile_stat(player.x, player.y+5, 1), x=player.x, y=player.y+5},
				{state=check_tile_stat(player.x-3, player.y+5, 1), x=player.x-3, y=player.y+5},
				{state=check_tile_stat(player.x+3, player.y+5, 1), x=player.x+3, y=player.y+5},
			}
			for tile in all(grabbable_tiles) do
				if tile.state then
					local tx, ty = coordinate_to_tile(tile.x, tile.y)
					local tile_id = mget(tx, ty)
					mset(tx, ty, 0)
					player.grabbing = tile_id
					break
				end
			end
		elseif btn(D) and player.grabbing != -1 then
			spawn_thrown_tile(player.grabbing, player.x, player.y - 8, 1, 0.75)
			player.grabbing = -1
			player.y_velocity = - jump_strength
			if player.grappling then
				player.grappling = false
				player.hook = nil
			end
		elseif btn(U) and player.grabbing != -1 then
			if player.grabbing == 18 then
				if not player.hook then
					fire_grapple()
					player.grabbing = 16
				else
					player.grappling = false
					player.hook = nil
				end
			end
		elseif player.grabbing != -1 then
			spawn_thrown_tile(player.grabbing, player.x, player.y - 8, 3, player.facing == L and 0.375 or 0.125)
			player.grabbing = -1
			if player.grappling then
				player.grappling = false
				player.hook = nil
			end
		end
	end
end
-->8
-- tile logic
function spawn_thrown_tile(id, x, y, velocity, direction)
	add(thrown_tiles, {
		id=id, 
		x=x, 
		y=y, 
		x_velocity=velocity * cos(direction),
		y_velocity=velocity * sin(direction),
	})
end

function move_tiles()
	local explosion_size = 20
	for tile in all(thrown_tiles) do
		tile.y_velocity += gravity

		local new_y = tile.y + tile.y_velocity
		if tile.y_velocity > 0 and (
			--is_solid_tile(tile.x - 3, new_y + 4) or
			check_tile_stat(tile.x, new_y + 4, 0) --or
			--is_solid_tile(tile.x + 3, new_y + 4)
		) then
			tile.y = flr((new_y + 4) / 8) * 8 - 4
			tile.y_velocity = 0
			local tx, ty = coordinate_to_tile(tile.x, tile.y)
			mset(tx, ty, tile.id)
			del(thrown_tiles, tile)
			if tile.id == 17 then
				explode(tile.x, tile.y, explosion_size)
			end
		elseif tile.y_velocity < 0 and (
			check_tile_stat(tile.x - 3, new_y - 4, 0) or
			check_tile_stat(tile.x, new_y - 4, 0) or
			check_tile_stat(tile.x + 3, new_y - 4, 0) 
		) then
			tile.y = flr((new_y - 4) / 8 + 1) * 8 + 4
			tile.y_velocity = 0
		else
			tile.y = new_y
		end

		local new_x = tile.x + tile.x_velocity
		if tile.x_velocity != 0 then
			local offset = tile.x_velocity > 0 and 4 or -4
			if check_tile_stat(new_x + offset, tile.y, 0) then
				if tile.x_velocity > 0 then
					tile.x = flr((new_x + 4) / 8) * 8 - 4
				else
					tile.x = flr((new_x - 4) / 8 + 1) * 8 + 4
				end
				tile.x_velocity = 0
				if tile.id == 17 then
					explode(tile.x, tile.y, explosion_size)
					del(thrown_tiles, tile)
				end
			else
				tile.x = new_x
			end
		end
	end
end

function explode(x, y, radius)
	local explosion_strength = 10
	local dist_from_player = dist(x, y, player.x, player.y)
	for tile in all(get_tiles_in_radius(x, y, radius)) do
		local cx, cy = tile.x * 8 + 4, tile.y * 8 + 4
		if check_tile_stat(cx, cy, 0) and not check_tile_stat(cx, cy, 2) then
			mset(tile.x, tile.y, 0)

			if tile.id == 17 then
				explode(cx, cy, radius)
			else
				local explosion_distance = dist(x, y, cx, cy)
				if explosion_distance > radius/2 then 
					local magnitude = ((radius - explosion_distance)/radius) * explosion_strength
					magnitude = mid(explosion_strength/2, magnitude, explosion_strength)
					local direction = atan2(cx - x, -abs(cy - y))
					spawn_thrown_tile(tile.id, cx, cy, magnitude, direction)
				end
			end
		end
	end

	if dist_from_player < radius then
		local magnitude = ((radius - dist_from_player)/radius) * explosion_strength
		magnitude = mid(explosion_strength/2, magnitude, explosion_strength)
		local direction = atan2(player.x - x, -abs(player.y - y))
		player.x_velocity += cos(direction) * magnitude
		player.y_velocity += sin(direction) * magnitude
	end
end

function draw_thrown_tiles()
	for tile in all(thrown_tiles) do
		spr(tile.id, tile.x - 4, tile.y-4)
	end
end
-->8
-- environment logic
function load_environment(index)
	copy_map(index * 16, 16, 0, 0, 16, 16)
end

function draw_environment()
	map(0,0,0,0,16,16)
end

function check_tile_stat(x, y, stat)
	local tx, ty = coordinate_to_tile(x, y)
	local tile = mget(tx, ty)
	return fget(tile, stat)
end

function copy_map(sx, sy, dx, dy, w, h)
	local map_w = 128 -- total width of map in tiles
	local src_addr = 0x2000 + sy * map_w + sx
	local dst_addr = 0x2000 + dy * map_w + dx

	for row = 0, h - 1 do
		memcpy(dst_addr + row * map_w, src_addr + row * map_w, w)
	end
end
-->8
-- enemy logic
function spawn_enemies()
	for x=0, 15 do
		for y=0, 15 do 
			local tile_id = mget(x, y)
			if tile_id == 2 then
				add(enemies, {x=x * 8 + 4,y=y * 8 + 4, id=tile_id, x_velocity=0.25})
				mset(x, y, 0)
			end
		end
	end
end

function move_enemies()
	for enemy in all(enemies) do
		local new_x = enemy.x + enemy.x_velocity
		if enemy.x_velocity != 0 then
			local offset = enemy.x_velocity > 0 and 4 or -4
			if check_tile_stat(new_x + offset, enemy.y, 0) then
				if enemy.x_velocity > 0 then
					enemy.x = flr((new_x + 4) / 8) * 8 - 4
				else
					enemy.x = flr((new_x - 4) / 8 + 1) * 8 + 4
				end
				enemy.x_velocity *= -1
			elseif not check_tile_stat(new_x + offset, enemy.y + 5, 0) then
				enemy.x_velocity *= -1
				enemy.x += enemy.x_velocity
			else
				enemy.x = new_x
			end
		end

		if is_collide(enemy.x, enemy.y, player.x, player.y) then
			damage_player()
		end

		for tile in all(thrown_tiles) do
			if is_collide(enemy.x, enemy.y, tile.x, tile.y) then
				del(enemies, enemy)
			end
		end
	end
end

function draw_enemies()
	for enemy in all(enemies) do
		spr(enemy.id, enemy.x - 4, enemy.y-4)
	end
end
-->8
-- menu logic
function init_menu()
	menu_items = {"platforming test", "bomb test", "grapple test", "enemy test"}
    menu_text = {}
    selected = 1
    disableinput = 30
	game_state = 0
end

function update_menu()
    if disableinput > 0 then disableinput -= 1 end
    if btnp(2) then -- up
        selected -= 1
    elseif btnp(3) then -- down
        selected += 1
    end

    if selected < 1 then selected = #menu_items end
    if selected > #menu_items then selected = 1 end

    if (btnp(4) or btnp(5)) and disableinput <= 0 then
        if menu_items[selected] == "platforming test" then
            init_game(0)
		elseif menu_items[selected] == "bomb test" then
            init_game(1)
		elseif menu_items[selected] == "grapple test" then
            init_game(2)
		elseif menu_items[selected] == "enemy test" then
            init_game(3)
		end
    end
end

function draw_menu()
    cls()
    
    for i, item in ipairs(menu_text) do
        print(item, 0, i * 10, 7)
    end

    for i, item in ipairs(menu_items) do
        local y = 40 + i * 10
        if i == selected then
            print("> "..item, 36, y, 11)
        else
            print(item, 44, y, 6)
        end
    end
end
-->8
-- helper functions
function coordinate_to_tile(x, y)
	return flr(x / 8), flr(y / 8)
end

function dist(x1, y1, x2, y2)
	return sqrt((x2 - x1)^2 + (y2 - y1)^2)
end

function is_collide(x1, y1, x2, y2)
    local half = 4 -- half of 8
    return abs(x1 - x2) < 8 and abs(y1 - y2) < 8
end

function get_tiles_in_radius(cx, cy, radius)
	local tiles = {}
	local r2 = radius * radius

	local tx = flr(cx / 8)
	local ty = flr(cy / 8)
	local tr = ceil(radius / 8)

	for y = ty - tr, ty + tr do
		for x = tx - tr, tx + tr do
			local px = x * 8 + 4
			local py = y * 8 + 4
			if (px - cx)^2 + (py - cy)^2 <= r2 then
				add(tiles, {x = x, y = y, id=mget(x, y)})
			end
		end
	end

	return tiles
end

__gfx__
00000000333333338788887800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333338878878800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700333333338887788800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000373333738788887800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000333333338888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700377777738777777800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333338888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333338888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeeeeeee99999999cccccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000003030300000000000000000000000000000000000000000000000000000000000105000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303031313131313131313131313131313131303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000001000003031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000030303030303031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000000000031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000000003031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000030303030000000003031000000000000000000000000303031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031000000000000000000000030303031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030300000000000000000000000003031000000000000000000003030303031300000000000000000000000000000303000000000000000000000020000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031111100000000000030303030303031300000000000000000000000000000303000000000000000000030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000001030300000000000303000003031111100000000003030303030303031300000000000000000000000000000303000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000000000000000000003031111111000030303030303030303031301212000000000000000000000000303010100000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3000000000000030300000000000103031111111003030303030303030303031301212000000000000000000000000303010100000000000000000000002003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3030303030303030303030303030303031313131313131313131313131313131303030303030303030303030303030303030303030303030303030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
